import pika  # Import the Pika library, which allows interaction with RabbitMQ
from pika.exchange_type import ExchangeType  # Import ExchangeType for specifying the type of exchange

# Define a callback function to handle messages received
def on_message_received(ch, method, properties, body):
    print(f'Payments - received new message: {body}')

# Define the connection parameters for RabbitMQ server (localhost)
connection_parameters = pika.ConnectionParameters('localhost')

# Establish a connection to RabbitMQ server
connection = pika.BlockingConnection(connection_parameters)

# Create a communication channel
channel = connection.channel()

# Declare an exchange of type 'topic' named 'topic'
channel.exchange_declare(exchange='topic', exchange_type=ExchangeType.topic)

# Declare a temporary, exclusive queue (queue name is generated by RabbitMQ)
queue = channel.queue_declare(queue='payments_queue', exclusive=True)

# Bind the queue to the 'topic' exchange with a routing key pattern that matches any key ending with '.payments'
channel.queue_bind(exchange='topic', queue=queue.method.queue, routing_key='#.payments')

# Set up a consumer on the queue to call the callback function when a message is received
channel.basic_consume(queue=queue.method.queue, auto_ack=True, on_message_callback=on_message_received)

# Print a message to indicate that the consumer is ready to start consuming messages
print('Payments Starting Consuming')

# Start consuming messages from the queue
channel.start_consuming()
